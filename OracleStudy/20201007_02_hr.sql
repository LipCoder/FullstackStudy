SELECT USER
FROM DUAL;
--==>> HR

--■■■ 정규화(Normalization) ■■■--

--○ 정규화란?
--   한 마디로 데이터베이스 서버의 메모리 낭비를 막기 위해
--   어떤 하나의 테이블을... 식별자를 가지는 여러 개의 테이블로 나누는 과정을 말한다.

-- ex) 홍준이가... 옥장판을 판매한다.
--     고객리스트 -> 거래처 직원의 명단이 적혀있는 수첩의 정보를
--                   데이터베이스화 하려고 한다.

-- 테이블명 : 거래처직원
/*
    10Byte    10Byte   10Byte         10Byte    10Byte 10Byte     10Byte
--------------------------------------------------------------------------------
거래처회사명 회사주소 회사전화     거래처직원명 직급  이메일      휴대폰
--------------------------------------------------------------------------------
    LG      서울여의도 02-345-6789    강정우     부장  kjw@na....  010-1...
    LG      서울여의도 02-345-6789    권소윤     과장  ksy@da....  010-7...
    LG      서울여의도 02-345-6789    정의진     대리  jyj@te....  010-2...
    LG      서울여의도 02-345-6789    안혜지     부장  ahj@na....  010-1...    
    SK      서울소공동 02-345-6789    이준구     부장  ljk@gm....  010-9...
    LG      부산동래구 051-777-8888   진영은     대리  jye@na....  010-8...
    LG      부산동래구 051-777-8888   조윤상     대리  cys@na....  010-3...
    SK      서울소공동 02-987-6543    김일웅     부장  kiw@da....  010-9...
                                        :
                                        :
--------------------------------------------------------------------------------
*/

/* 
가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.
      (70byte * 100만)
      
      어느 날... [서울여의도]에 위치한 LG 본사가 [경기일산] 으로
      사옥을 이전하게 되었다.
      
      회사주소는 [경기일산]으로 바뀌고, 회사전화 [031-111-2222] 로 바뀌게 되었다.
      
      그러면... 100만 명의 회사주소와 회사전화를 변경해야 한다.
      
      -- 이 때 수행되어야 할 쿼리문 -> UPDATE
      

      
      UPDATE 거래처직원
      SET 회사주소='경기일산', 회사전화='031-111-2222'
      WHERE 거래처회사명 = 'LG'
        AND 회사주소 = '서울여의도';
      
      -- 100만 개 행(레코드)을 하드디스크 상에서 읽어다가
         메모리에 로드시켜 주어야 한다.
         즉, 100만 * 70Byte 를 모두
         하드디스크 상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.
         
         --> 이는 테이블의 설계가 잘못되었으므로
             DB 서버는 조만간 메모리 고갈로 인해 DOWN 될 것이다.
            
             --> 그러므로 정규화 과정을 수행해야 한다.
*/


-- 제 1 정규화
--> 어떤 하나의 테이블에 반복되는 컬럼 값들이 존재한다면
--  값들이 반복되어 나오는 컬럼을 분리하여
--  새로운 테이블을 만들어준다.

--> 제 1 정규화를 수행하는 과정에서 분리된 테이블은
--  반드시 부모 테이블과 자식 테이블의 관계를 갖게 된다.

--> 부모 테이블 -> 참조받는 컬럼 -> PRIMARY KEY
--> 자식 테이블 -> 참조하는 컬럼 -> FOREIGN KEY

--※ 참조받는 컬럼이 갖는 특징
--   반드시 고유한 값(데이터)만 들어와야 한다.
--   중복된 값(데이터)이 없어야 한다.
--   NULL 이 있어서는 안된다. (즉, NOT NULL 이어야 한다.)
 
--> 제 1 정규화를 수행하는 과정에서
--  부모 테이블의 PRIMARY KEY 는 항상 자식 테이블의 FOREIGN KEY 로 전이된다.

-- 테이블명 : 회사 -> 부모테이블
/*
10Byte   10Byte    10Byte   10Byte         
--------------------------------------------------------------------------------
회사ID 거래처회사명 회사주소 회사전화   
======
참조받는 컬럼 -> P.K
--------------------------------------------------------------------------------
 10     LG      서울여의도 02-345-6789         
 20     SK      서울소공동 02-345-6789    
 30     LG      부산동래구 051-777-8888  
--------------------------------------------------------------------------------
*/

-- 테이블명 : 직원 -> 자식테이블
/*
  10Byte    10Byte 10Byte     10Byte
--------------------------------------------------------------------------------
거래처직원명 직급  이메일      휴대폰        회사ID
                                             =========
                                             참조하는 컬럼 -> F.K
--------------------------------------------------------------------------------
  강정우     부장  kjw@na....  010-1...      10
  권소윤     과장  ksy@da....  010-7...      10
  정의진     대리  jyj@te....  010-2...      10
  안혜지     부장  ahj@na....  010-1...      10
  이준구     부장  ljk@gm....  010-9...      20
  진영은     대리  jye@na....  010-8...      30
  조윤상     대리  cys@na....  010-3...      30
  김일웅     부장  kiw@da....  010-9...      20
            :
            :
--------------------------------------------------------------------------------
*/


-- 테이블이 분리되기 이전 상태로 조회
SELECT A.거래처회사명, A.회사주소, A.회사전화, 
       B.거래처직원명, B.직급, B.이메일, B.휴대폰
FROM 회사 A, 직원 B
WHERE A.회사ID = B.회사ID;

/* 
가정) 서울 여의도 LG 라는 회사에 근무하는 거래처 직원 명단이
      총 100만 명이라고 가정한다.

      전체 직원은 200만 명이다.      

      어느 날... [서울여의도]에 위치한 LG 본사가 [경기일산] 으로
      사옥을 이전하게 되었다.
      
      회사주소는 [경기일산]으로 바뀌고, 회사전화 [031-111-2222] 로 바뀌게 되었다.
      
      그러면... 100만 명의 회사주소와 회사전화를 변경해야 한다.
      
      -- 이 때 수행되어야 할 쿼리문 -> UPDATE
      
      UPDATE 회사
      SET 회사주소 = '경기일산', 회사전화 = '031-111-2222'
      WHERE 회사ID = 10;
   
      -- 1개 행(레코드)을 하드디스크 상에서 읽어다가
         메모리에 로드시켜 주어야 한다.
         즉, 1 * 40Byte 를 하드디스크 상에서 읽어다가 메모리에 로드시켜 주어야 한다는 말이다.
         
         --> 정규화 이전에는 100만 건을 처리해야 할 업무에서
             1건만 처리하면 되는 업무로 바뀐 상황이기 때문에 
             DB 서버는 메모리 고갈이 일어나지 않고 아주 빠르게 처리될 것이다.
*/

/*
-- 거래처회사명, 회사전화
SELECT 거래처회사명, 회사전화         |     SELECT 거래처회사명, 회사전화
FROM 회사;                            |     FROM 거래처직원;
--> 3 * 40 Byte                       |     --> 200만 * 70Byte

-- 거래처직원명, 직급
SELECT 거래처직원명, 직급             |     SELECT 거래처 직원명, 직급
FROM 직원;                            |     FROM 거래처직원;
--> 200만 * 50Byte                    |     -> 200만 * 70Byte

-- 거래처회사명, 거래처직원명
SELECT A.거래처회사명, B.거래처직원명 |    SELECT 거래처회사명, 거래처직원명
FROM 회사 A JOIN 직원 B               |    FROM 거래처직원;
ON A.회사ID = B.회사ID;               |     
--> (3 * 40 Byte) + (200만 * 50Byte)       -> 200만 * 70Byte

--> 차지하는 메모리가 많이 줄었다!
*/


-- 테이블명 : 주문
/*
--------------------------------------------------------------------------------
     고객ID         제품코드           주문일자              주문수량
--------------------------------------------------------------------------------
    LJJ1217(이진주) PKKBK(꿀꽈배기)    2020-10-02 13:50:47        10
    AHR9238(안혜리) PKKBC(꼬북칩)      2020-10-02 14:23:15        20
    KJH5266(김종호) PKKDS(쿠크다스)    2020-10-02 14:15:30        13
    KSY1234(김소윤) PKWKK(새우깡)      2020-10-03 09:00:11         5
                        :
                        :
--------------------------------------------------------------------------------
*/

--※ 하나의 테이블에 존재하는 PRIMARY KEY 의 최대 갯수는 1개이다.
--   하지만, PRIMARY KEY 를 이루는(구성하는) 컬럼의 갯수는 복수(여러개)인 것이 가능하다.
-->  컬럼 한 개로만 구성된 PRIMARY KEY 를 SINGLE PRIMARY KEY 라고 부른다.
--   (단일 프라이머리 키)
-->  두 개 이상의 컬럼으로 구성된 PRIMARY KEY 를 COMPOSITE PRIMARY KEY 라고 부른다.
--   (복합 프라이머리 키)
--   결과물이 단일 프라이머리 키라면 제 2 정규화를 건너뛰어도 되지만
--   만약 복합 프라이머리 키라면 꼭 제 2 정규화를 해줘야 한다.
--   제 2 정규화는 이걸 쪼개는 과정이기 때문이다.