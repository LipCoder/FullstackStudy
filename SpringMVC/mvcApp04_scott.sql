SELECT USER
FROM DUAL;
--==>> SCOTT


--○ 실습 테이블 생성(지역 : REGION)
CREATE TABLE REGION
( REGIONID      NUMBER          -- 지역 아이디   -- PK
, REGIONNAME    VARCHAR2(30)    -- 지역 이름  
, CONSTRAINT REGION_ID_PK PRIMARY KEY(REGIONID)
);
--==>> Table REGION이(가) 생성되었습니다.


--○ 시퀀스 생성(지역 : REGIONSEQ)
CREATE SEQUENCE REGIONSEQ
NOCACHE;
--==>> Sequence REGIONSEQ이(가) 생성되었습니다.


--○ 데이터 입력(지역 데이터 입력)
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '서울');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '인천');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '대구');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '광주');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '대전');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '부산');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '울산');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경기');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '강원');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '충북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '충남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '전북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '전남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경북');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '경남');
INSERT INTO REGION(REGIONID, REGIONNAME) VALUES(REGIONSEQ.NEXTVAL, '제주');
--==>> 1 행 이(가) 삽입되었습니다. * 16

SELECT REGIONID, REGIONNAME
FROM REGION;
--==>> 
/*
1	서울
2	인천
3	대구
4	광주
5	대전
6	부산
7	울산
8	경기
9	강원
10	충북
11	충남
12	전북
13	경북
14	경남
15	제주
16	전남
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 실습 테이블 생성(직위 : POSITION)
CREATE TABLE POSITION
( POSITIONID    NUMBER          -- 직위 아이디   -- PK
, POSITIONNAME  VARCHAR2(30)    -- 직위 이름 
, MINBASICPAY   NUMBER          -- 해당 직위의 최소 기본급
, CONSTRAINT POSITION_ID_PK PRIMARY KEY(POSITIONID)
);
--==>> Table POSITION이(가) 생성되었습니다.


--○ 시퀀스 생성(직위 : POSITIONSEQ)
CREATE SEQUENCE POSITIONSEQ
NOCACHE;
--==>> Sequence POSITIONSEQ이(가) 생성되었습니다.


--○ 데이터 입력(직위 데이터 입력)
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '사원', 1000000);         -- 백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '대리', 2000000);         -- 이백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '부장', 3000000);         -- 삼백만
INSERT INTO POSITION(POSITIONID, POSITIONNAME, MINBASICPAY)
VALUES(POSITIONSEQ.NEXTVAL, '상무', 4000000);         -- 사백만
--==>> 1 행 이(가) 삽입되었습니다. * 4

SELECT * 
FROM POSITION;

COMMIT;


--○ 실습 테이블 생성(부서 : DEPARTMENT)
CREATE TABLE DEPARTMENT
( DEPARTMENTID  NUMBER              -- 부서 아이디 -- PK
, DEPARTMENTNAME    VARCHAR2(30)    -- 부서 이름
, CONSTRAINT DEPARTMENT_ID_PK PRIMARY KEY(DEPARTMENTID)
);
--==>> Table DEPARTMENT이(가) 생성되었습니다.


--○ 시퀀스 생성(부서 : DEPARTMENTSEQ)
CREATE SEQUENCE DEPARTMENTSEQ
NOCACHE;
--==>> Sequence DEPARTMENTSEQ이(가) 생성되었습니다.


--○ 데이터 입력(부서 데이터 입력)
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '개발부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '기획부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '영업부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '인사부');
INSERT INTO DEPARTMENT(DEPARTMENTID, DEPARTMENTNAME) VALUES(DEPARTMENTSEQ.NEXTVAL, '사업부');
--==>> 1 행 이(가) 삽입되었습니다. * 5


--○ 확인
SELECT *
FROM DEPARTMENT;
--==>> 
/*
1	개발부
2	기획부
3	영업부
4	인사부
5	사업부
*/


--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 실습 테이블 생성(직원 : EMPLOYEE)
--   사원번호, 사원명, 주민번호, 생년월일, 양음력, 전화번호, 부서, 직위, 지역, 기본급, 수당
CREATE TABLE EMPLOYEE
( EMPLOYEEID    NUMBER              -- 사원 번호    -- PK
, NAME          VARCHAR2(30)        -- 사원 이름
, SSN           VARCHAR2(20)        -- 주민 번호    -- 암호화 기능 적용(타입 CHECK~!!!)
, BIRTHDAY      DATE                -- 생년월일
, LUNAR         NUMBER(1) DEFAULT 0 -- 양음력       -- 양력0, 음력1
, TELEPHONE     VARCHAR2(40)        -- 전화번호
, DEPARTMENTID  NUMBER              -- 부서 아이디  -- FK
, POSITIONID    NUMBER              -- 직위 아이디  -- FK
, REGIONID      NUMBER              -- 지역 아이디  -- FK
, BASICPAY      NUMBER              -- 기본급
, EXTRAPAY      NUMBER              -- 수당
, CONSTRAINT EMPLOYEE_ID_PK PRIMARY KEY(EMPLOYEEID)
, CONSTRAINT EMPLOYEE_DEPARTMENTID_KF FOREIGN KEY(DEPARTMENTID)
             REFERENCES DEPARTMENT(DEPARTMENTID)
, CONSTRAINT EMPLOYEE_POSITIONID_FK FOREIGN KEY(POSITIONID)
             REFERENCES POSITION(POSITIONID)
, CONSTRAINT EMPLOYEE_REGIONID_FK FOREIGN KEY(REGIONID)
             REFERENCES REGION(REGIONID)
, CONSTRAINT EMPLOYEE_LUNAR_CK CHECK(LUNAR=0 OR LUNAR=1)
);
--==>> Table EMPLOYEE이(가) 생성되었습니다.


--○ 시퀀스 생성(직원 : EMPLOYEESEQ)
CREATE SEQUENCE EMPLOYEESEQ
NOCACHE;
--==>> Sequence EMPLOYEESEQ이(가) 생성되었습니다.


--○ 데이터 입력(직원 데이터 입력)
INSERT INTO EMPLOYEE( EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNAR
                    , TELEPHONE, DEPARTMENTID, POSITIONID, REGIONID
                    , BASICPAY, EXTRAPAY )
VALUES( EMPLOYEESEQ.NEXTVAL, '강정우', CRYPTPACK.ENCRYPT('9611111234567', '9611111234567')
      , TO_DATE('1996-11-11', 'YYYY-MM-DD'), 0, '010-8934-7808', 1, 1, 1, 1500000, 150000);
--==>> 1 행 이(가) 삽입되었습니다.


--※ 세션 설정 변경
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
--==>> Session이(가) 변경되었습니다.


--○ 확인
SELECT *
FROM EMPLOYEE;
--==>> 
/* 1	강정우	6?S??d^M?	1996-11-11	0	010-8934-7808	1	1	1	1500000	150000 */


-- 커밋
COMMIT;
--==>> 커밋 완료.


--○ 직원 데이터 조회 쿼리문 구성
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID=E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID=E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID=E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
FROM EMPLOYEE E;
--==>> 1	강정우	6?S??d^M?	1996-11-11	0	양력	010-8934-7808	1	개발부	1	사원	1	서울	1500000	150000	1650000


--○ 뷰(EMPLOYEEVIEW) 생성 → 직원 데이터 조회 쿼리문 구성
CREATE OR REPLACE VIEW EMPLOYEEVIEW
AS
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID=E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID=E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID=E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
FROM EMPLOYEE E;
--==>> View EMPLOYEEVIEW이(가) 생성되었습니다.


--○ 확인
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY
, LUNAR, LUNARNAME, TELEPHONE
, DEPARTMENTID, DEPARTMENTNAME
, POSITIONID, POSITIONNAME
, REGIONID, REGIONNAME
, BASICPAY, EXTRAPAY, PAY, GRADE
FROM EMPLOYEEVIEW;
--> 한줄
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNAR, LUNARNAME, TELEPHONE, DEPARTMENTID, DEPARTMENTNAME, POSITIONID, POSITIONNAME, REGIONID, REGIONNAME, BASICPAY, EXTRAPAY, PAY, GRADE FROM EMPLOYEEVIEW;
--==>>
/*
1	강정우	6?S??d^M?	1996-11-11	0	양력	010-8934-7808	1	개발부	1	사원	1	서울	1500000	150000	1650000
*/


--○ 지역 데이터 조회 쿼리문 구성(지역 데이터 삭제 가능여부 확인)
SELECT R.REGIONID AS REGIONID
     , R.REGIONNAME AS REGIONNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE REGIONID=R.REGIONID) AS DELCHECK
FROM REGION R;
--==>>
/*
1	서울	1
2	인천	0
3	대구	0
4	광주	0
5	대전	0
6	부산	0
7	울산	0
8	경기	0
9	강원	0
10	충북	0
11	충남	0
12	전북	0
13	경북	0
14	경남	0
15	제주	0
16	전남	0
*/
--> 『서울』의 지역 데이터는 삭제가 불가능한 데이터이며,
--  나머지 지역 데이터는 삭제 가능한 데이터임을 판별할 수 있도록 구성한 쿼리문.

--※ 뷰 생성(지역 데이터 : REGIONVIEW)
CREATE OR REPLACE VIEW REGIONVIEW
AS
SELECT R.REGIONID AS REGIONID
     , R.REGIONNAME AS REGIONNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE REGIONID=R.REGIONID) AS DELCHECK
FROM REGION R;
--==>> View REGIONVIEW이(가) 생성되었습니다.

--○ 직위 데이터 조회 쿼리문 구성(직위 데이터 삭제 가능여부 확인)
SELECT P.POSITIONID AS POSITIONID
     , P.POSITIONNAME AS POSITIONNAME
     , P.MINBASICPAY AS MINBASICPAY
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE POSITIONID=P.POSITIONID) AS DELCHECK
FROM POSITION P;
--==>>
/*
1	사원	1000000	1
2	대리	2000000	0
3	부장	3000000	0
4	상무	4000000	0
*/
--> 『사원』의 직위 데이터는 삭제가 불가능한 데이터이며,
--  나머지 직위 데이터는 삭제 가능한 데이터임을 판별할 수 있도록 구성한 쿼리문.

--※ 뷰 생성(직위 데이터 : POSITIONVIEW)
CREATE OR REPLACE VIEW POSITIONVIEW
AS
SELECT P.POSITIONID AS POSITIONID
     , P.POSITIONNAME AS POSITIONNAME
     , P.MINBASICPAY AS MINBASICPAY
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE POSITIONID=P.POSITIONID) AS DELCHECK
FROM POSITION P;
--==>> View POSITIONVIEW이(가) 생성되었습니다.


--○ 부서 데이터 조회 쿼리문 구성(부서 데이터 삭제 가능여부 확인)
SELECT D.DEPARTMENTID AS DEPARTMENTID
     , D.DEPARTMENTNAME AS DEPARTMENTNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE DEPARTMENTID=D.DEPARTMENTID) AS DELCHECK
FROM DEPARTMENT D;
--==>>
/*
1	개발부	1
2	기획부	0
3	영업부	0
4	인사부	0
5	사업부	0
*/
--> 『개발부』의 부서 데이터는 삭제가 불가능한 데이터이며,
--  나머지 부서 데이터는 삭제 가능한 데이터임을 판별할 수 있도록 구성한 쿼리문.

--※ 뷰 생성(부서 데이터 : DEPARTMENTVIEW)
CREATE OR REPLACE VIEW DEPARTMENTVIEW
AS
SELECT D.DEPARTMENTID AS DEPARTMENTID
     , D.DEPARTMENTNAME AS DEPARTMENTNAME
     , (SELECT COUNT(*)
        FROM EMPLOYEE
        WHERE DEPARTMENTID=D.DEPARTMENTID) AS DELCHECK
FROM DEPARTMENT D;
--==>> View DEPARTMENTVIEW이(가) 생성되었습니다.

--○ 부서 데이터 조회 쿼리문 구성
SELECT DEPARTMENTID, DEPARTMENTNAME, DELCHECK
FROM DEPARTMENTVIEW
ORDER BY DEPARTMENTID;
--> 한 줄 구성
SELECT DEPARTMENTID, DEPARTMENTNAME, DELCHECK FROM DEPARTMENTVIEW ORDER BY DEPARTMENTID
;

--○ 부서 데이터 삭제 쿼리문 구성
DELETE
FROM DEPARTMENT
WHERE DEPARTMENTID = 1;
--> 한 줄 구성
DELETE FROM DEPARTMENT WHERE DEPARTMENTID = 1
;


--○ 부서 데이터 수정 쿼리문 구성
UPDATE DEPARTMENT
FROM DEPARTMENTNAME='총무부'
WHERE DEPARTMENTID = 1;
--> 한 줄 구성
UPDATE DEPARTMENT FROM DEPARTMENTNAME='총무부' WHERE DEPARTMENTID = 1;
;


--○ 지역 데이터 조회 쿼리문 구성
SELECT REGIONID, REGIONNAME, DELCHECK
FROM REGIONVIEW
ORDER BY REGIONID;
--> 한 줄 구성
SELECT REGIONID, REGIONNAME, DELCHECK FROM REGIONVIEW ORDER BY REGIONID
;


--○ 지역 데이터 삭제 쿼리문 구성
DELETE
FROM REGION
WHERE REGIONID=1;
--> 한 줄 구성
DELETE FROM REGION WHERE REGIONID=1
;


--○ 지역 데이터 수정 쿼리문 구성
UPDATE REGION
SET REGIONNAME='지역명'
WHERE REGIONID=1;
--> 한 줄 구성
UPDATE REGION SET REGIONNAME='지역명' WHERE REGIONID=1
;


--○ 직위 데이터 조회 쿼리문 구성
SELECT POSITIONID, POSITIONNAME, MINBASICPAY, DELCHECK
FROM POSITIONVIEW
ORDER BY POSITIONID;
--> 한 줄 구성
SELECT POSITIONID, POSITIONNAME, MINBASICPAY, DELCHECK FROM POSITIONVIEW ORDER BY POSITIONID
;


--○ 직위 데이터 삭제 쿼리문 구성
DELETE
FROM POSITION
WHERE POSITIONID=1;
--> 한 줄 구성
DELETE FROM POSITION WHERE POSITIONID=1
;


--○ 직위 데이터 수정 쿼리문 구성
UPDATE POSITION
SET POSITIONNAME='직위명', MINBASICPAY='최소기본급'
WHERE POSITIONID=1;
--> 한 줄 구성
UPDATE POSITION SET POSITIONNAME='직위명', MINBASICPAY='최소기본급' WHERE POSITIONID=1
;


--------------------------------------------------------------------------------

--■■■ 로그인 / 로그아웃 기능 적용 과정 추가 ■■■--

-- ID 와 PW 컬럼 정보를 담고 있는 테이블이 별도로 존재하지 않는 상황이다.
-- 이와 관련하여, EMPLOYEEID(사원아이디) 와 SSN(주민번호) 뒷자리 7자리의 숫자를
-- 활용할 수 있도록 구성한다.

--※ 기존 테이블 구조 변경
-- ①
-- EMPLOYEE(직원 정보 테이블)DML SSN(주민번호) 컬럼을 분리한다.
-- SSN -----------> SSN1, SSN2
-- SSN1 ----------> 주민번호 앞 6자리
-- SSN2 ----------> 주민번호 뒷 7자리 → 암호화 적용

-- ②
-- EMPLOYEE(직원 정보 테이블)에 GRADE(등급) 컬럼을 추가한다.
-- GRADE ----------> 관리자0, 일반사원1



-- ①-1. 컬럼 추가
ALTER TABLE EMPLOYEE
ADD(SSN1 CHAR(6), SSN2 VARCHAR2(50));
--==>> Table EMPLOYEE이(가) 변경되었습니다.

SELECT *
FROM EMPLOYEE;

SELECT CRYPTPACK.DECRYPT(SSN, '9611111234567')
FROM EMPLOYEE;

-- ①-2. 컬럼 내용 수정(UPDATE)
UPDATE EMPLOYEE
SET SSN1 = SUBSTR(입력내용, 1, 6)
  , SSN2 = CRYPTPACK.ENCRYPT(SUBSTR(입력내용, 7, 7), SUBSTR(입력내용, 7, 7))
WHERE EMPLOYEEID=1;

UPDATE EMPLOYEE
SET SSN1 = SUBSTR(CRYPTPACK.DECRYPT(SSN, '9611111234567'), 1, 6)
  , SSN2 = CRYPTPACK.ENCRYPT(SUBSTR(CRYPTPACK.DECRYPT(SSN, '9611111234567'), 7, 7), SUBSTR(CRYPTPACK.DECRYPT(SSN, '9611111234567'), 7, 7))
WHERE EMPLOYEEID=1;
--==>> 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM EMPLOYEE;


-- ②-1. GRADE 컬럼 추가 → 기본값을 1(일반사원)로 구성
ALTER TABLE EMPLOYEE
ADD GRADE NUMBER(1) DEFAULT 1;
--==>> Table EMPLOYEE이(가) 변경되었습니다.

SELECT *
FROM EMPLOYEE;


-- ②-2. 강정우 사원을 관리자로 임명(설정)
UPDATE EMPLOYEE
SET GRADE=0
WHERE EMPLOYEEID=1;
--==>> 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM EMPLOYEE;

COMMIT;


--※ 테이블의 구조를 변경했기 때문에
--   이 테이블을 기반으로 생성한 뷰(VIEW)의 내용을 수정
CREATE OR REPLACE VIEW EMPLOYEEVIEW
AS
SELECT E.EMPLOYEEID AS EMPLOYEEID
     , E.NAME AS NAME
     , E.SSN1 AS SSN
     , TO_CHAR(E.BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , E.LUNAR AS LUNAR
     , DECODE(E.LUNAR, 0, '양력', 1, '음력') AS LUNARNAME
     , E.TELEPHONE AS TELEPHONE
     , E.DEPARTMENTID AS DEPARTMENTID
     , (SELECT DEPARTMENTNAME
        FROM DEPARTMENT
        WHERE DEPARTMENTID=E.DEPARTMENTID) AS DEPARTMENTNAME
     , E.POSITIONID AS POSITIONID
     , (SELECT POSITIONNAME
        FROM POSITION
        WHERE POSITIONID=E.POSITIONID) AS POSITIONNAME
     , E.REGIONID AS REGIONID
     , (SELECT REGIONNAME
        FROM REGION
        WHERE REGIONID=E.REGIONID) AS REGIONNAME
     , E.BASICPAY AS BASICPAY
     , E.EXTRAPAY AS EXTRAPAY
     , NVL(E.BASICPAY, 0) + NVL(E.EXTRAPAY, 0) AS PAY
     , E.GRADE AS GRADE
FROM EMPLOYEE E
ORDER BY E.EMPLOYEEID;
--==>> View EMPLOYEEVIEW이(가) 생성되었습니다.


--○ 직원 데이터 입력 쿼리문 구성
INSERT INTO EMPLOYEE( EMPLOYEEID, NAME, SSN1, SSN2, BIRTHDAY, LUNAR, TELEPHONE
                    , DEPARTMENTID, POSITIONID, REGIONID, BASICPAY, EXTRAPAY )
VALUES( EMPLOYEESEQ.NEXTVAL, '권소윤', '941007', CRYPTPACK.ENCRYPT('2234567', '2234567')
      , TO_DATE('1994-10-07', 'YYYY-MM-DD'), 0, '010-5771-9551', 1, 1, 6, 1500000, 150000);
--==>> 1 행 이(가) 삽입되었습니다.
--> 한 줄 구성
INSERT INTO EMPLOYEE( EMPLOYEEID, NAME, SSN1, SSN2, BIRTHDAY, LUNAR, TELEPHONE, DEPARTMENTID, POSITIONID, REGIONID, BASICPAY, EXTRAPAY ) VALUES( EMPLOYEESEQ.NEXTVAL, '권소윤', '941007', CRYPTPACK.ENCRYPT('2234567', '2234567'), TO_DATE('1994-10-07', 'YYYY-MM-DD'), 0, '010-5771-9551', 1, 1, 6, 1500000, 150000)
;

SELECT *
FROM EMPLOYEEVIEW;
--==>> 
/*
1	강정우	961111	1996-11-11	0	양력	010-8934-7808	1	개발부	1	사원	1	서울	1500000	150000	1650000	0
2	권소윤	941007	1994-10-07	0	양력	010-5771-9551	1	개발부	1	사원	6	부산	1500000	150000	1650000	1
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.




--------------------------------------------------------------------------------

-- 일반 사원 로그인 쿼리문 구성
-- (ID → EMPLOYEEID, PW → SSN2)
SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID='ID입력문자열'
  AND SSN2=(SELECT SSN2
            FROM EMPLOYEE
            WHERE EMPLOYEEID='ID입력문자열');
            
--> 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID='ID입력문자열' AND SSN2=(SELECT SSN2 FROM EMPLOYEE WHERE EMPLOYEEID='ID입력문자열')
;

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=2
  AND SSN2=(SELECT SSN2
            FROM EMPLOYEE
            WHERE EMPLOYEEID=2);
--==>> 권소윤

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID='ID입력문자열'
  AND (SELECT SSN2
       FROM EMPLOYEE
       WHERE EMPLOYEEID='ID입력문자열') = CRYPTPACK.ENCRYPT('PW입력문자열', 'PW입력문자열');
--> 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID='ID입력문자열' AND (SELECT SSN2 FROM EMPLOYEE WHERE EMPLOYEEID='ID입력문자열') = CRYPTPACK.ENCRYPT('PW입력문자열', 'PW입력문자열')
;

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=2
  AND (SELECT SSN2
       FROM EMPLOYEE
       WHERE EMPLOYEEID=2) = CRYPTPACK.ENCRYPT('2234567', '2234567');
--==>> 권소윤

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=2
  AND SSN2 = CRYPTPACK.ENCRYPT('2234567', '2234567');
--==>> 권소윤


SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=3
  AND SSN2 = CRYPTPACK.ENCRYPT('2234567', '2234567');
--==>> 조회 결과 없음(잘못된 아이디)
--> 로그인 실패~!!!

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=2
  AND SSN2 = CRYPTPACK.ENCRYPT('1234567', '1234567');
--==>> 조회 결과 없음(잘못된 패스워드)
--> 로그인 실패~!!!

--※ 일반 사원 로그인 쿼리문 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID=2 AND SSN2 = CRYPTPACK.ENCRYPT('1234567', '1234567')
;


-- 관리자 로그인 쿼리문 구성
SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=2
  AND SSN2=CRYPTPACK.ENCRYPT('2234567', '2234567')
  AND GRADE=0;
--> 권소윤 로그인 실패

SELECT NAME
FROM EMPLOYEE
WHERE EMPLOYEEID=1
  AND SSN2=CRYPTPACK.ENCRYPT('1234567', '1234567')
  AND GRADE=0;
--> 강정우 로그인 성공

--※ 관리자 로그인 쿼리문 한 줄 구성
SELECT NAME FROM EMPLOYEE WHERE EMPLOYEEID=1 AND SSN2=CRYPTPACK.ENCRYPT('1234567', '1234567') AND GRADE=0
;

--○ 직원 조회
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY
, LUNAR, LUNARNAME, TELEPHONE
, DEPARTMENTID, DEPARTMENTNAME
, POSITIONID, POSITIONNAME
, REGIONID, REGIONNAME
, BASICPAY, EXTRAPAY, PAY, GRADE
FROM EMPLOYEEVIEW;
--> 한줄
SELECT EMPLOYEEID, NAME, SSN, BIRTHDAY, LUNAR, LUNARNAME, TELEPHONE, DEPARTMENTID, DEPARTMENTNAME, POSITIONID, POSITIONNAME, REGIONID, REGIONNAME, BASICPAY, EXTRAPAY, PAY, GRADE FROM EMPLOYEEVIEW
;


--○ 직위에 따른 최소 기본급 조회
SELECT MINBASICPAY
FROM POSITION
WHERE POSITIONID=1;
--> 한 줄 구성
SELECT MINBASICPAY FROM POSITION WHERE POSITIONID=1
;


--○ 직원 삭제
DELETE 
FROM EMPLOYEE 
WHERE EMPLOYEEID = 1;
--> 한 줄 구성
DELETE FROM EMPLOYEE WHERE EMPLOYEEID = 1
;


--○ 직원 데이터 수정 쿼리문 구성
UPDATE EMPLOYEE
SET NAME='안혜지', SSN1='950302', SSN2=CRYPTPACK.ENCRYPT('1234567', '1234567')
  , BIRTHDAY=TO_DATE('1995-03-02', 'YYYY-MM-DD'), LUNAR=0
  , TELEPHONE='010-9349-2717', DEPARTMENTID=1, POSITIONID=1, REGIONID=1
  , BASICPAY=1500000, EXTRAPAY=150000
WHERE EMPLOYEEID=1;
--> 한 줄 구성
UPDATE EMPLOYEE SET NAME='안혜지', SSN1='950302', SSN2=CRYPTPACK.ENCRYPT('1234567', '1234567'), BIRTHDAY=TO_DATE('1995-03-02', 'YYYY-MM-DD'), LUNAR=0, TELEPHONE='010-9349-2717', DEPARTMENTID=1, POSITIONID=1, REGIONID=1, BASICPAY=1500000, EXTRAPAY=150000 WHERE EMPLOYEEID=1
;
--==>> 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM EMPLOYEEVIEW;

COMMIT;

SELECT EMPLOYEEID, NAME, SSN1
     , TO_CHAR(BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY
     , LUNAR, TELEPHONE
     , DEPARTMENTID, POSITIONID, REGIONID
     , BASICPAY, EXTRAPAY
FROM EMPLOYEE
WHERE EMPLOYEEID=1;
--> 한 줄 구성
SELECT EMPLOYEEID, NAME, SSN1, TO_CHAR(BIRTHDAY, 'YYYY-MM-DD') AS BIRTHDAY, LUNAR, TELEPHONE , DEPARTMENTID, POSITIONID, REGIONID , BASICPAY, EXTRAPAY FROM EMPLOYEE WHERE EMPLOYEEID=1
;
--==>> 1	안혜지	950302	1995-03-02	0	010-9349-2717	1	1	1	1500000	150000