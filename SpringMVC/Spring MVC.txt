■■■ Spring MVC ■■■

1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
   Spring 에서는 DispatcherServlet 클래스가 컨트롤러 역할을 수행하게 된다.

2. Spring MVC 의 주요 구성요소
   - DispatcherServlet
     : 클라이언트의 요청을 전달받는다.
       Controller(사용자 정의 컨트롤러)에게 클라이언트의 요청을 전달하고
       Controller 가 리턴한 결과값을 View 에 전달하여
       적합한 응답을 생성하도록 처리한다.
   - HandlerMapping
     : 클라이언트의 요청 URL 을 어떤 Controller 가 처리할지 결정한다.
   - Controller
     : 사용자 정의 Controller. 액션 처리. 우리가 작성.
   - ModelAndView
     : View 객체 정보와 결과값이 들어있는 객체
   - ViewResolver
     : 요청에 대한 처리 결과를 보여줄 View 를 결정한다.
   - View
     : 요청에 대한 처리 결과를 보여줄 응답(결과 출력)을 생성한다. 우리가 작성
   - web.xml
     : DispatcherServlet 서블릿 객체 등록. 우리가 작성.
   - dispatcher-servlet.xml
     : Controller 객체 등록. 우리가 작성
  
3. Spring MVC 실행 흐름
   - 사용자 요청 → DispatcherServlet.
   - DispatcherServlet → HandlerMapping 에 주소 분석 요청.
   - DispatcherServlet → 특정 Controller 객체 호출 및 결과 수신.
                          결과는 ModelAndView 객체.
   - DispatcherServlet → ViewResolver 에 View 객체 분석 요청.
   - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고
                          결과 출력.
     ※ ModelAndView 객체
        : View 객체 정보와 결과값이 들어있는 객체.

4. Spring MVC 에서 우리가 할 일
   - Controller
     액션 처리를 단담하는 Controller 클래스 작성.
     Annotation 을 사용하거나 Controller 인터페이스를 구현하여 작성.

   - View
     결과 출력용 JSP 페이지 작성.
  
   - web.xml
     서블릿 주소와 DispatcherServlet 클래스 등록.

   - dispatcher-servlet.xml
     우리가 작성한 Controller 객체 등록.
     URL 매핑 주소 등록.


-------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp01) ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp01

○ 기타 환경 설정
   → 폰트, 줄번호, 편집 포맷, 인코딩 방식 등...
   : 기존 환경 설정 파일(epf) import

○ 톰캣 서버 등록 및 설정
   : Apache-Tomcat 8.5 선택 및 디렉터리 경로 지정
     포트 번호 변경 및 URIEncoding 지정
     (port 8090, URIEncoding="UTF-8")

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : WebContent > WEB-INF > lib 경로에 등록
     - 경로1    : E:\spring-3.0.2-with-docs\dist 
		  (스프링 기본 jar 경로)
       ·파일01 : org.springframework.aop-3.0.2.RELEASE.jar
       ·파일02 : org.springframework.asm-3.0.2.RELEASE.jar
       ·파일03 : org.springframework.beans-3.0.2.RELEASE.jar
       ·파일04 : org.springframework.context-3.0.2.RELEASE.jar
       ·파일05 : org.springframework.core-3.0.2.RELEASE.jar
       ·파일06 : org.springframework.expression-3.0.2.RELEASE.jar
       ·파일07 : org.springframework.jdbc-3.0.2.RELEASE.jar
       ·파일08 : org.springframework.transaction-3.0.2.RELEASE.jar
       ·파일09 : org.springframework.web.servlet-3.0.2.RELEASE.jar
       ·파일10 : org.springframework.web-3.0.2.RELEASE.jar
     - 경로2    : E:\spring-3.0.2-dependencies\org.apache.commons					  	\com.springsource.org.apache.commons.logging\1.1.1 
                  (스프링 의존 jar 경로)
       ·파일11 : com.springsource.org.apache.commons.logging-1.1.1.jar
     - 경로3    : E:\oracleexe\app\oracle\product\11.2.0\server\jdbc\lib
                  (오라클 설치 경로)
       ·파일12 : ojdbc6.jar
     - 경로4    : E:\00.Downloads\13_JSTL\jakarta-taglibs-standard-1.1.2\lib
                  (JSTL 다운로드 경로)
       ·파일13 : jstl.jar
       ·파일14 : standard.jar

○ 물리적 파일 구성
   - HelloController.java	→ 사용자 정의 컨트롤러 클래스
   - Hello.jsp			→ View 페이지
   - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 등록
   				   및 URL 매핑 주소 등록
   - web.xml			→ Spring MVC Framework
                                   Front Controller


○ 이 프로젝트의 실행 및 처리 과정
    
   ① 외부 요청
      http://localhost:8090/mvcApp01/hello.action

      ※ web.xml 관여
         (~.action 요청 → DispacherServlet 등록)

   ② DispatcherServlet 요청 접수
      및 사용자 요청 분석

      ※ dispatcher-servlet.xml
         (/hello.action → xxx.java)

   ③ DispatcherServlet 이 Controller(사용자 정의 Controller) 지정
      → Controller 의 특정 메소드 호출(액션 처리, ModelAndView 반환)
         사용자의 요청에 맞는 액션 처리
         결과 데이터가 들어있는 모델 객체 준비
         뷰 정보(JSP 페이지 정보 - 객체가 아닌 View 페이지 이름(경로 포함)) 반환

   ④ 뷰(View) 페이지에서 최종 웹 페이지 작성
      → JSP 페이지 내에서 EL, JSTL 등의 표기 사용 가능.
 
   ⑤ 최종적으로 그려진 html 문서가 클라이언트의 브라우저로 전달되면서 응답 완료.

   ....


-------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp02) ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp02

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.
   
○ 물리적 파일 구성
   - SendController.java	→ 컨트롤러(Controller) 객체
   - Send.jsp			→ 뷰(View) 객체
   - ReceiveController.java	→ 컨트롤러(Controller) 객체
   - Receive.jsp		→ 뷰(View) 객체
   - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러 객체 등록
   				   및 URL 매핑 주소 등록
   - web.xml			→ DispatcherServlet 객체 등록


○ 사용자 최초 요청 주소
   http://localhost:8090/mvcApp02/send.action



-----------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp03) ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp02

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.

○ 실습 성격
   : 데이터 송수신 실습(Spring MVC 버전)
     JDBC 모듈 추가 실습
     SimpleDriverDataSource 클래스 활용

○ 구현 기능
   : 사용자로부터 이름, 전화번호 데이터를 입력받아 DB에 저장.
     이름, 전화번호 항목을 DB로 부터 읽어 화면에 출력.

○ 사전 작업
   - TBL_MEMBERLIST 테이블 생성 / 활용
   - MEMBERLISTSEQ 시퀀스 생성 / 활용
   - 샘플 데이터 입력

○ 화면 구성(레이아웃)
   이름 [           ]    → <input type="text">
   전화 [           ]    → <input type="text">
   <회원 추가>	         → <button type="button">

   전체 인원 수 : 2명    → <p>...</p>
   --------------------- → <table> 혹은 <div>
   번호  이름  전화번호
    1   안혜.. 010-...
    2   진영.. 010-...
   ---------------------
   
○ 물리적 파일 구성
   - mvcApp03_scott.sql		→ 데이터베이스 관련 객체 준비

   - MemberDTO.java		→ 사용자 정의 자료형 객체(DTO)

   - IMemberDAO.java		→ 인터페이스
   - MemberDAO.java		→ 데이터베이스 액션 처리 객체.
				   ※ Connection 객체에 대한 의존성 주입
                                      → setter 메소드 추가

   - MemberListController.java	→ 사용자 정의 컨트롤러(Controller) 객체.
                                   리스트 출력 액션.
                                   ※ DAO 객체에 대한 의존성 주입.
                                      → setter 메소드 추가.
   - MemberList.jsp             → 회원 명단 출력용 뷰(View)
                                   회원 추가 폼에 대한 레이아웃(화면) 구성.

   - MemberInsertController.java→ 사용자 정의 컨트롤러(Controller) 객체.
                                   회원 데이터 추가 액션.
                                   ※ DAO 객체에 대한 의존성 주입.
                                      → setter 메소드 추가.

   - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러(Controller) 객체 등록
   				   사용자 요청 URL 매핑 주소 등록.
				   SimpleDriverDataSource 객체 등록.
                                   의존 객체 주입 설정.
				   DAO 객체 등록.

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록.

○ 사용자 최초 요청 주소
   http://localhost:8090/mvcApp03/memberlist.action


-----------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp04) ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp02

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.

○ 실습 성격
   : 직원 관리 프로그램 실습(Spring MVC 버전)
     JDBC 모듈 추가 실습
     SimpleDriverDataSource 클래스 활용

○ 구현 기능
   - 직원 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 지역 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 부서 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 직원 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 로그인 / 로그아웃 기능 구현
     → 관리자 및 일반 직원 로그인 구분
   ==> Spring MVC, JSP/Servlet, HTML / CSS / Javascript
       , AJAX, jQuery, EL, JSTL 표현 등 사용.

○ 사전 작업
   - 주요 테이블 생성 / 활용
     ·EMPLOYEE	        직원
     ·REGION	        지역
     ·DEPARTMENT	부서
     ·POSITION         직위
   - 주요 시퀀스 생성 / 활용
   - 샘플 데이터 입력

   
○ 물리적 파일 구성
   - #00. mvcApp04_scott.sql		→ 데이터베이스 관련 객체 준비

   - #01. Employee.java			→ DTO 개념. 직원 정보 자료형 클래스.
   - #02. Department.java		→ DTO 개념. 부서 정보 자료형 클래스.
   - #03. Region.java			→ DTO 개념. 지역 정보 자료형 클래스.
   - #04. Position.java			→ DTO 개념. 직위 정보 자료형 클래스.

   - #05. IEmployeeDAO.java		→ 인터페이스.
   - #06. IDepartmentDAO.java		→ 인터페이스.
   - #07. IRegionDAO.java		→ 인터페이스.
   - #08. IPositionDAO.java		→ 인터페이스.

   - #09. EmployeeDAO.java		→ 데이터베이스 액션 처리 클래스.
					   직원 데이터 입출력 및 수정 삭제.
					   Connection 객체에 대한 의존성 주입 준비
                                           (인터페이스 자료형 / setter 구성)  
   - #10. DepartmentDAO.java		→ 데이터베이스 액션 처리 클래스.
					   부서 데이터 입출력 및 수정 삭제.
					   Connection 객체에 대한 의존성 주입 준비
                                           (인터페이스 자료형 / setter 구성)
   - #11. RegionDAO.java		→ 데이터베이스 액션 처리 클래스.
					   지역 데이터 입출력 및 수정 삭제.
					   Connection 객체에 대한 의존성 주입 준비
                                           (인터페이스 자료형 / setter 구성)
   - #12. PositionDAO.java		→ 데이터베이스 액션 처리 클래스.
					   직위 데이터 입출력 및 수정 삭제.
					   Connection 객체에 대한 의존성 주입 준비
                                           (인터페이스 자료형 / setter 구성)

   - #13. EmployeeMenu.jsp		→ 메인 메뉴 뷰(View) 페이지.
					   로그인 후 접근 페이지이기 때문에
 					   로그아웃에 대한 처리 가능한 컨트롤 구성.
   - #14. EmployeeList.jsp		→ 직원 정보(리스트) 출력 페이지.
   - #14-1. menuStyle.css		→ 메뉴 스타일 구성.
   - #14-2. mainStyle.css		→ 메인 스타일 구성.

   - #15. EmployeeListController.java
   - #16. EmployeeInsertFormController.java

   - #17. EmployeeInsertForm.jsp	→ 직원 데이터 입력 폼(Form) 페이지.
					   AJAX, jQuery 기능 포함.

   - #18. AjaxController.java
   - #19. EmployeeInsertController.java
   - #20. EmployeeUpdateFormController.java
 
   - #21. EmployeeUpdateForm.jsp	→ 직원 데이터 수정 폼(Form) 페이지.
                                           AJAX, jQuery 기능 포함.

   - #22. EmployeeUpdateController.java
   - #23. EmployeeDeleteController.java

   - #24. LoginFormController.java

   - #25. LoginForm.jsp		        → 로그인 폼(Form) 페이지.
	
   - #26. LoginController.java
   - #27. LogoutController.java          

   - #28. EmpList.jsp
   - #29. EmpListController.java

   - #30. RegionListController.java
   - #31. RegionList.jsp

   - #32. RegionInsertFormController.java
   - #33. RegionInsertForm.jsp

   - #34. RegionAjaxController.java
   - #35. RegionAjax.jsp

   - #36. RegionInsertController.java

   - #37. RegionUpdateFormController.java
   - #38. RegionUpdateForm.java

   - #39. RegionUpdateController.java

   - #40. RegionDeleteController.java

		      :

   * Department
   - #41. DepartmentListController.java
   - #42. DepartmentList.jsp
   
   - #43. DepartmentInsertFormController.java
   - #44. DepartmentInsertForm.jsp
    
   - #45. DepartmentAjaxController.java
   - #46. DepartmentAjax.jsp

   - #47. DepartmentInsertController.java

   - #48. DepartmentUpdateFormController.java
   - #49. DepartmentUpdateForm.jsp
  
   - #50. DepartmentUpdateController.java

   - #51. DepartmentDeleteController.java
 
   * Position
   - #52. PositionListController.java
   - #53. PositionList.jsp
   
   - #54. PositionInsertFormController.java
   - #55. PositionInsertForm.jsp
    
   - #56. PositionAjaxController.java
   - #57. PositionAjax.jsp

   - #58. PositionInsertController.java

   - #59. PositionUpdateFormController.java
   - #60. PositionUpdateForm.java
  
   - #61. PositionUpdateController.java

   - #62. PositionDeleteController.java


   - dispatcher-servlet.xml	→ 사용자 정의 컨트롤러(Controller) 객체 등록
   				   사용자 요청 URL 매핑 주소 등록.
				   SimpleDriverDataSource 객체 등록.
                                   의존 객체 주입 설정.
				   DAO 객체 등록.

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록.

○ 사용자 최초 요청 주소
   http://localhost:8090/mvcApp04/memberlist.action


-----------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp05) ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Project(또는 스프링 레거시 프로젝트)
   : mvcApp02

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.

○ 실습 성격
   : 성적 관리 프로그램 실습(Spring MVC 버전)
     JDBC 모듈 추가 실습
     SimpleDriverDataSource 클래스 활용

○ 구현 기능
   - 학생 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 성적 정보 입력, 출력, 수정, 삭제 기능 구현.
   - 로그인 / 로그아웃 기능 구현
   ==> Spring MVC, JSP/Servlet, HTML / CSS / Javascript
       , AJAX, jQuery, EL, JSTL 표현 등 사용.

○ 사전 작업
   - 주요 테이블 생성 / 활용
     ·MEMBERLIST	학생
     ·MEMBERRECORD	성적
   - 주요 시퀀스 생성 / 활용
   - 샘플 데이터 입력

   
○ 물리적 파일 구성
   - #00. mvcApp05_scott.sql		→ 데이터베이스 관련 객체 준비.


-----------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp06) Annotation 표기법을 활용하여 작성 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Proejct(또는 스프링 레거시 프로젝트)
   : mvcApp06

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.

○ 실습 성격
   : Annotation 표기법을 활용하여 샘플 기본 기능 구성.

○ 기능 구현
   - 페이지 요청 및 응답(mvc annotation)
   
○ 물리적 파일 구성
   - #00. web.xml			 → DispatcherServlet 객체 등록.
 					    (Front Controller)
 					    URL 매핑 주소 등록.
                                            필터 적용.
   - #01. dispatcher-servlet.xml	 → 『<context:component-scan>』
					    엘리먼트 등록
   - #02. HelloController.java		 → 사용자 정의 컨트롤러.
                                            『@Controller』, 『@RequestMapping』
                                            어노테이션 등록.
   - #03. Hello.jsp			 → 사용자 정의 뷰(View)
   - #04. hello.action			 → 서블릿 주소 연결용 빈 페이지.

○ 사용자 최초 요청 주소
   http://localhost:8090/mvc06/hello.action


-----------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 관련 실습(mvcApp07) Annotation 표기법을 활용하여 작성 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   → STS 사용 시 Spring Proejct(또는 스프링 레거시 프로젝트)
   : mvcApp07

○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : 원도우 탐색기 상에서
     SpringMVC > mvcApp00(샘플) 디렉터리 접근
     『src』와 『WebContent』 항목을 복사하여 해당 프로젝트에 덮어쓰기 한다.

○ 실습 성격
   : Annotation 표기법을 활용하여 샘플 기본 기능 구성.

○ 기능 구현
   - 폼 데이터 전송 및 수신(mvc annotation)
   - 데이터베이스 연결 및 데이터 저장.

○ 사전 작업
   - TBL_MEMBERLIST 테이블 구성.
   - 샘플 데이터 활용.
   - 주요 쿼리문 구성.

   
○ 물리적 파일 구성
   - #00. mvcApp07_scott.sql



   - #01. web.xml			 → DispatcherServlet 객체 등록.
 					    (Front Controller)
 					    URL 매핑 주소 등록.
                                            필터 적용.
   - #02. dispatcher-servlet.xml	 → 『<context:component-scan>』
					    엘리먼트 등록
   - #03. DBConn.java
   - #04. MemberDTO.java
   - #05. MemberDAO.java

   - #06. MemberInsertForm.jsp
   - #07. MemberInsert.jsp
   - #08. MemberList.jsp

   - #09. MemberRecordController.java

   - memberlist.action


○ 사용자 최초 요청 주소
   http://localhost:8090/mvc07/memberlist.action









